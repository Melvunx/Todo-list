<template>
<body>
<header>
    <h1>Melvunx's To-do list</h1>
</header>  
    <div id="card-form-container">
        <div class="card-form">
            <div id="grid-form">
                <form @submit.prevent="addTodo" id="add-todo-form">
                    <div class="grid-form-content">
                        <div id="form-disposition-container">
                            <div>
                                <label for="list" class="add-label-form" id="newtodo-label">New To-do List</label>
                            </div>
                            <div>
                                <textarea placeholder="New note.." id="list" v-model="newTodo.list" required ></textarea>
                            </div>
                        </div>
                    </div>
                </form>
                <form @submit.prevent="addTodo" id="add-todo-form">
                    <div class="grid-form-content">
                        <div id="form-add-container">
                            <div class="form-add-content">
                                <input type="checkbox" id="important" v-model="newTodo.important" value="1">
                                <label for="important" class="add-label-form">: Important note</label>
                            </div>
                            <div class="form-add-content">
                                <button id="add-btn" type="submit">Add To-do</button>
                            </div>
                        </div>
                    </div>
                </form>
                <form @submit.prevent="searchTodo">
                    <div class="grid-form-content">
                        <div id="form-disposition-container">
                            <div>
                                <label for="search" class="add-label-form">To search note :</label>
                            </div>
                            <div>
                                <input type="text" id="search-input" placeholder="Search todo.." v-model="searchText" name="entree">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- Todo list content -->
    <div id="card-container">
            <draggable v-model="dragList" @end="updateListOrder" item-key="id" group="todolist">
                <template #item=" {element : todo} ">
                    <div @click="updateStatus(todo)" @dblclick="resetStatus(todo)" 
                    :class="{'todoImportant': todo.important, 'NotTodoImportant': !todo.important}">
                        <div class="card">
                            <div id="grid-todolist-content">
                                <div class="grid-todolist-content">
                                    <p :class="{ 'strikethrough': todo.status === 1 }">{{ todo.list }}</p>
                                </div>
                                <div class="grid-todolist-content">
                                    <button @click="toggleImportance(todo)" class="important-btn" :class="{'btn-unmark': todo.important, 'btn-mark': !todo.important}"> 
                                        {{ todo.important ? 'Unmark' : 'Mark' }} </button>
                                    <button id="delete-btn" type="button"  @click="deleteTodo(todo.id)">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>
            </draggable>
        </div>
    </body>
</template>

<script>
import axios from 'axios';
import draggable from 'vuedraggable';

export default {
    components:{
        draggable,
    },
    data() {
        return {
            todolist: [],
            dragList: [],
            newTodo: {
                list: '',
                status: 0,
                important: '',
                position:'',
            },
            searchText: '',
        };
    },
    methods: {
        async addTodo() {
            await axios.post('http://localhost:3000/api/add', this.newTodo);
            this.newTodo = { list: '', important: '' };
            this.newTodo.position = this.dragList.length + 1;
            await this.fetchTodoList();
        },

        async updateStatus(todo) {
            todo.status = 1;
            await axios.put(`http://localhost:3000/api/update/statut/${todo.id}`, todo);
        },

        async resetStatus(todo) {
            todo.status = 0;
            await axios.put(`http://localhost:3000/api/update/statut/${todo.id}`, todo);
        },

        async searchTodo() {
            const response = await axios.get(`http://localhost:3000/api/search/${this.searchText}`);
            this.todolist = response.data;
        },

        async deleteTodo(todoId) {
            await axios.delete(`http://localhost:3000/api/delete/${todoId}`);
            await this.fetchTodoList();
        },

        async fetchTodoList() {
            const response = await axios.get('http://localhost:3000/api/data');
            this.todolist = response.data.sort((a, b) => {
                if (a.important && !b.important) return -1; 
                if (!a.important && b.important) return 1; 
                return 0; 
            });
            this.dragList = [...this.todolist]; // Update dragList with the fetched list
        },

        async toggleImportance(todo){
            todo.important = !todo.important;
            const updatedTodo = { ...todo }; 
            await axios.put(`http://localhost:3000/api/update/important/${todo.id}`, { important: updatedTodo.important });
            await this.reorderImportantTask(updatedTodo);
        },

        

        async reorderImportantTask(todo){
            if (todo.important) {
                const index = this.dragList.findIndex(item => item.id === todo.id);
                if (index > 0) {
                    const importantTask = this.dragList.splice(index, 1)[0];
                    this.dragList.unshift(importantTask);
                }
            }
        },
    

        async updateListOrder() {
    const todoIds = this.dragList.map(todo => todo.id);
    try {
        // Envoyer la liste triée au backend pour mise à jour
        await axios.put('http://localhost:3000/api/updateOrder', { todoIds });
        // Mettre à jour dragList avec la nouvelle liste triée renvoyée par le backend
        const response = await axios.get('http://localhost:3000/api/data');
        this.dragList = response.data;
        console.log('Order updated successfully');
    } catch (error) {
        console.error('Error updating order:', error);
    }
},



    },

    computed: {
        filteredTodoList() {
            return this.dragList.filter(todo => {
                return todo.list.toLowerCase().includes(this.searchText.toLowerCase());
            });
        },
    },
    async mounted() {
        await this.fetchTodoList();
    }
}
</script>